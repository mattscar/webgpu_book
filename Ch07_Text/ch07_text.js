const shaderCode = `struct DataStruct {    @builtin(position) pos: vec4f,    @location(0) uvPos: vec2f,}@group(0) @binding(0) var sam : sampler;@group(0) @binding(1) var tex : texture_2d<f32>;@vertexfn vertexMain(@location(0) coords: vec2f, @location(1) uvCoords: vec2f) -> DataStruct {    var outData: DataStruct;    outData.pos = vec4f(coords, 0.0, 1.0);    outData.uvPos = uvCoords;    return outData;}@fragmentfn fragmentMain(fragData: DataStruct) -> @location(0) vec4f {    return textureSample(tex, sam, fragData.uvPos);}`;// Create top-level asynchronous functionasync function runExample() {// Check if WebGPU is supportedif (!navigator.gpu) {    throw new Error("WebGPU not supported");}// Access the GPUAdapterconst adapter = await navigator.gpu.requestAdapter();if (!adapter) {    throw new Error("No GPUAdapter found");}// Access the GPUconst device = await adapter.requestDevice();if (!device) {    throw new Error("Failed to create a GPUDevice");}// Access the canvasconst canvas = document.getElementById("canvas_example");if (!canvas) {    throw new Error("Could not access canvas in page");}// Obtain a WebGPU context for the canvasconst context = canvas.getContext("webgpu");if (!context) {    throw new Error("Could not obtain WebGPU context for canvas");}// Configure the context with the device and formatconst canvasFormat = navigator.gpu.getPreferredCanvasFormat();context.configure({    device: device,    format: canvasFormat,});// Create the command encoderconst encoder = device.createCommandEncoder();if (!encoder) {    throw new Error("Failed to create a GPUCommandEncoder");}// Create the render pass encoderconst renderPass = encoder.beginRenderPass({    colorAttachments: [{        view: context.getCurrentTexture().createView(),        loadOp: "clear",        clearValue: { r: 1.0, g: 1.0, b: 1.0, a: 1.0 },        storeOp: "store"    }]});// Define vertex dataconst textMsg = "Hello, world!";let leftX = -0.9;const topY = 0.7;const bottomY = 0.5;const lineHeight = 32;const scale = (topY - bottomY)/lineHeight;// Create vertex data arrayconst vertexData = new Float32Array(16 * textMsg.length);// Read character dataconst fileResponse = await fetch("./lato_data.json");const charData = await fileResponse.json();// Iterate through characters in messagefor (let i = 0; i < textMsg.length; i++) {    // Get index of message character    let currentChar = charData[textMsg.charCodeAt(i) - 32];    // Set texture coordinates    vertexData[16 * i + 2] = currentChar.x/256.0;    vertexData[16 * i + 3] = (currentChar.y + currentChar.height)/256.0;    vertexData[16 * i + 6] = currentChar.x/256.0;    vertexData[16 * i + 7] = currentChar.y/256.0;    vertexData[16 * i + 10] = (currentChar.x + currentChar.width)/256.0;    vertexData[16 * i + 11] = (currentChar.y + currentChar.height)/256.0;    vertexData[16 * i + 14] = (currentChar.x + currentChar.width)/256.0;    vertexData[16 * i + 15] = currentChar.y/256.0;        // Set vertex coordinates    if(i == 0) {        vertexData[0] = leftX;        vertexData[1] = bottomY;        vertexData[4] = leftX;        vertexData[5] = topY - currentChar.yoffset * scale;    }    else {        vertexData[16 * i] = leftX + currentChar.xoffset * scale;        vertexData[16 * i + 1] = bottomY;        vertexData[16 * i + 4] = vertexData[16*i];        vertexData[16 * i + 5] = topY - currentChar.yoffset * scale;    }    vertexData[16 * i + 8] = vertexData[16*i] + currentChar.width * scale;    vertexData[16 * i + 9] = bottomY;    vertexData[16 * i + 12] = vertexData[16 * i + 8];    vertexData[16 * i + 13] = topY - currentChar.yoffset * scale;    // Set kerning    let kerning = 0;    if('kerning' in currentChar) {                // Get next character        if(i != textMsg.length-1) {            let nextId = charData[textMsg.charCodeAt(i+1) - 32].id;                        // Apply kerning if needed            if (nextId in currentChar.kerning) {                kerning = parseInt(currentChar.kerning[nextId]);            }        }    }    // Update current horizontal position    leftX += (currentChar.xadvance + kerning) * scale;}// Create vertex bufferconst vertexBuffer = device.createBuffer({    label: "Vertex Buffer 0",    size: vertexData.byteLength,    usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST});// Write data to bufferdevice.queue.writeBuffer(vertexBuffer, 0, vertexData);renderPass.setVertexBuffer(0, vertexBuffer);// Define layout of buffer dataconst bufferLayout = {    arrayStride: 16,    attributes: [       { format: "float32x2", offset: 0, shaderLocation: 0 },       { format: "float32x2", offset: 8, shaderLocation: 1 }    ],};// Initialize index array for atlas textconst numIndexes = ((5 * textMsg.length) % 2 == 0) ? 5 * textMsg.length : 5 * textMsg.length + 1;const indexData = new Uint16Array(numIndexes);for(let i = 0; i<textMsg.length; i++) {    indexData[5 * i] = 4 * i + 1;    indexData[5 * i + 1] = 4 * i;    indexData[5 * i + 2] = 4 * i + 3;    indexData[5 * i + 3] = 4 * i + 2;    indexData[5 * i + 4] = 0xffff;}// Create index bufferconst indexBuffer = device.createBuffer({    label: "Index Buffer 0",    size: indexData.byteLength,    usage: GPUBufferUsage.INDEX | GPUBufferUsage.COPY_DST});device.queue.writeBuffer(indexBuffer, 0, indexData);renderPass.setIndexBuffer(indexBuffer, "uint16");// Create ImageBitmap from image fileconst response = await fetch("lato.png")const imageBitmap = await createImageBitmap(await response.blob());// Create texture objectconst texture = device.createTexture({    size: [imageBitmap.width, imageBitmap.height],    format: "rgba8unorm",    usage:        GPUTextureUsage.RENDER_ATTACHMENT |        GPUTextureUsage.TEXTURE_BINDING |        GPUTextureUsage.COPY_DST});// Write data to texturedevice.queue.copyExternalImageToTexture(    { source: imageBitmap },    { texture: texture },    [imageBitmap.width, imageBitmap.height]);// Create samplerconst sampler = device.createSampler({    magFilter: 'linear',    minFilter: 'linear',});// Create the shader moduleconst shaderModule = device.createShaderModule({    label: "Shader Module 0",    code: shaderCode});// Define the rendering procedureconst renderPipeline = device.createRenderPipeline({    layout: "auto",    vertex: {      module: shaderModule,      entryPoint: "vertexMain",      buffers: [bufferLayout]    },    fragment: {      module: shaderModule,      entryPoint: "fragmentMain",      targets: [{        format: canvasFormat      }]    },    primitive: {        topology: "triangle-strip",        stripIndexFormat: "uint16"    }});renderPass.setPipeline(renderPipeline);// Access the bind group layoutconst bindGroupLayout = renderPipeline.getBindGroupLayout(0);// Create the bind grouplet bindGroup = device.createBindGroup({    layout: bindGroupLayout,    entries: [    {        binding: 0,        resource: sampler    },    {        binding: 1,        resource: texture.createView({            dimension: "2d",        })   }]});// Associate bind group with render pass encoderrenderPass.setBindGroup(0, bindGroup);// Draw vertices and complete renderingrenderPass.drawIndexed(5 * textMsg.length);renderPass.end();// Submit the render commands to the GPUdevice.queue.submit([encoder.finish()]);}// Run example functionrunExample();