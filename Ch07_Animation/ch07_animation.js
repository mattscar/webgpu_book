import { mat4 } from 'https://wgpu-matrix.org/dist/2.x/wgpu-matrix.module.js'; const shaderCode = `@group(0) @binding(0) var<uniform> transform_matrix: mat4x4f;@vertexfn vertexMain(@location(0) coords: vec2f) -> @builtin(position) vec4f {    return transform_matrix * vec4f(coords, 0.0, 1.0);}@fragmentfn fragmentMain() -> @location(0) vec4f {    return vec4f(1.0, 0.0, 0.0, 1.0);}`;// Create top-level asynchronous functionasync function runExample() {// Check if WebGPU is supportedif (!navigator.gpu) {    throw new Error("WebGPU not supported");}// Access the GPUAdapterconst adapter = await navigator.gpu.requestAdapter();if (!adapter) {    throw new Error("No GPUAdapter found");}// Access the client"s GPUconst device = await adapter.requestDevice();if (!device) {    throw new Error("Failed to create a GPUDevice");}// Access the canvasconst canvas = document.getElementById("canvas_example");if (!canvas) {    throw new Error("Could not access canvas in page");}// Obtain a WebGPU context for the canvasconst context = canvas.getContext("webgpu");if (!context) {    throw new Error("Could not obtain WebGPU context for canvas");}// Configure the context with the device and formatconst canvasFormat = navigator.gpu.getPreferredCanvasFormat();context.configure({    device: device,    format: canvasFormat,});// Define vertex data (coordinates and colors)const vertexData = new Float32Array([    -0.625, 0.4330,  // First vertex    -1.0, -0.2165,   // Second vertex    -0.25, -0.2165   // Third vertex]);let motionPerSec = (2.0 * 0.625)/2.0;let motionChange = 0.0;let totalTime = 0.0;let oldTime = 0.0;let t = 0.0;// Create vertex bufferconst vertexBuffer = device.createBuffer({    label: "Vertex Buffer 0",    size: vertexData.byteLength,    usage:         GPUBufferUsage.VERTEX |         GPUBufferUsage.COPY_DST});device.queue.writeBuffer(vertexBuffer, 0, vertexData);// Define layout of vertex bufferconst bufferLayout = {    arrayStride: 8,    attributes: [       { format: "float32x2", offset: 0, shaderLocation: 0 }    ],};// Define uniform datalet uniformData = mat4.identity();// Create uniform bufferconst uniformBuffer = device.createBuffer({    label: "Uniform Buffer 0",    size: uniformData.byteLength,    usage:         GPUBufferUsage.UNIFORM |         GPUBufferUsage.COPY_DST});// Create the shader moduleconst shaderModule = device.createShaderModule({    label: "Shader module 0",    code: shaderCode});// Define the rendering procedureconst renderPipeline = device.createRenderPipeline({    layout: "auto",    vertex: {      module: shaderModule,      entryPoint: "vertexMain",      buffers: [bufferLayout]    },    fragment: {      module: shaderModule,      entryPoint: "fragmentMain",      targets: [{        format: canvasFormat      }]    }});// Access the bind group layoutconst bindGroupLayout = renderPipeline.getBindGroupLayout(0);// Create the bind grouplet bindGroup = device.createBindGroup({    layout: bindGroupLayout,    entries: [{        binding: 0,        resource: { buffer: uniformBuffer }    }]});// Called just before the window is repaintedfunction newFrame(currentTime) {    // Skip first frame    if(oldTime == 0.0) {        oldTime = currentTime;        window.requestAnimationFrame(newFrame);        return;    }    // Compute elapsed time in seconds    t = (currentTime - oldTime)/1000;    oldTime = currentTime;        // Update total time    totalTime += t;    // Stop animation after four seconds    if (totalTime > 4.0) {        return;    }    // Update the uniform buffer    motionChange = totalTime < 2.0 ? t * motionPerSec : -t * motionPerSec;    uniformData = mat4.translate(uniformData, [motionChange, 0.0, 0.0]);     device.queue.writeBuffer(uniformBuffer, 0, uniformData);     // Create the command encoder and the render pass encoder    const encoder = device.createCommandEncoder();    const renderPass = encoder.beginRenderPass({        colorAttachments: [{            view: context.getCurrentTexture().createView(),            loadOp: "clear",            clearValue: { r: 0.9, g: 0.9, b: 0.9, a: 1.0 },            storeOp: "store"        }]    });    // Set the vertex buffer and pipeline    renderPass.setVertexBuffer(0, vertexBuffer);    renderPass.setPipeline(renderPipeline);    // Associate bind group with render pass encoder    renderPass.setBindGroup(0, bindGroup);    // Draw vertices    renderPass.draw(3);    renderPass.end();    // Submit the render commands to the GPU    device.queue.submit([encoder.finish()]);    window.requestAnimationFrame(newFrame);}window.requestAnimationFrame(newFrame);}// Run example functionrunExample();