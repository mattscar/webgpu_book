const computeCode = `@group(0) @binding(0) var in_tex : texture_2d<f32>;@group(0) @binding(1) var out_tex : texture_storage_2d<rgba8unorm, write>;override group_size_x: u32;override group_size_y: u32;@compute @workgroup_size(group_size_x, group_size_y)fn computeMain(    @builtin(global_invocation_id) global_id: vec3<u32>) {    var x = global_id.x;    var y = global_id.y;    var k = array<f32, 9>(-1.0, -1.0, -1.0, -1.0, 9.0, -1.0, -1.0, -1.0, -1.0);    // Load the texel at the given position    var texel: vec4f =         k[0] * textureLoad(in_tex, vec2(x-1, y-1), 0) +         k[1] * textureLoad(in_tex, vec2(x,   y-1), 0) +         k[2] * textureLoad(in_tex, vec2(x+1, y-1), 0) +         k[3] * textureLoad(in_tex, vec2(x-1, y), 0) +         k[4] * textureLoad(in_tex, vec2(x,   y), 0) +         k[5] * textureLoad(in_tex, vec2(x+1, y), 0) +         k[6] * textureLoad(in_tex, vec2(x-1, y+1), 0) +         k[7] * textureLoad(in_tex, vec2(x,   y+1), 0) +         k[8] * textureLoad(in_tex, vec2(x+1, y+1), 0);    // Store result to the storage texture    textureStore(out_tex, vec2(x, y), texel);}`;const renderCode = `struct DataStruct {    @builtin(position) pos: vec4f,    @location(0) uvPos: vec2f,}@group(0) @binding(0) var sam : sampler;@group(0) @binding(1) var tex : texture_2d<f32>;@vertexfn vertexMain(@location(0) coords: vec2f, @location(1) uvCoords: vec2f) -> DataStruct {    var outData: DataStruct;    outData.pos = vec4f(coords, 0.0, 1.0);    outData.uvPos = uvCoords;    return outData;}@fragmentfn fragmentMain(fragData: DataStruct) -> @location(0) vec4f {    return textureSample(tex, sam, fragData.uvPos);}`;// Create top-level asynchronous functionasync function runExample() {// Check if WebGPU is supportedif (!navigator.gpu) {    throw new Error("WebGPU not supported");}// Access the GPUAdapterconst adapter = await navigator.gpu.requestAdapter();if (!adapter) {    throw new Error("No GPUAdapter found");}// Access the GPUconst device = await adapter.requestDevice();if (!device) {    throw new Error("Failed to create a GPUDevice");}// Access the canvasconst canvas = document.getElementById("canvas_example");if (!canvas) {    throw new Error("Could not access canvas in page");}// Obtain a WebGPU context for the canvasconst context = canvas.getContext("webgpu");if (!context) {    throw new Error("Could not obtain WebGPU context for canvas");}// Configure the context with the device and formatconst canvasFormat = navigator.gpu.getPreferredCanvasFormat();context.configure({    device: device,    format: canvasFormat,});// Create the command encoderconst encoder = device.createCommandEncoder();if (!encoder) {    throw new Error("Failed to create a GPUCommandEncoder");}// Create samplerconst sampler = device.createSampler({    magFilter: "linear",    minFilter: "linear",});// Create ImageBitmap from image fileconst response = await fetch("tower.png");const imageBitmap = await createImageBitmap(await response.blob());// Create texture to hold input imageconst imageTexture = device.createTexture({    size: [imageBitmap.width, imageBitmap.height],    format: "rgba8unorm",    usage:        GPUTextureUsage.TEXTURE_BINDING |        GPUTextureUsage.COPY_DST |        GPUTextureUsage.RENDER_ATTACHMENT});// Write data to input texturedevice.queue.copyExternalImageToTexture(    { source: imageBitmap },    { texture: imageTexture },    [imageBitmap.width, imageBitmap.height]);// Create texture to hold storage imageconst storageTexture = device.createTexture({    size: [imageBitmap.width, imageBitmap.height],    format: "rgba8unorm",    usage:        GPUTextureUsage.TEXTURE_BINDING |        GPUTextureUsage.COPY_DST |        GPUTextureUsage.STORAGE_BINDING});// Create the shader moduleconst computeModule = device.createShaderModule({    label: "Shader module 0",    code: computeCode});// Create the compute pass encoderconst computePass = encoder.beginComputePass({    label: "Compute Pass 0"});// Define the compute procedureconst computePipeline = device.createComputePipeline({    label: "Compute Pipeline 0",    layout: "auto",    compute: {        module: computeModule,        entryPoint: "computeMain",        constants: {            group_size_x: 16,             group_size_y: 16        }             }   });computePass.setPipeline(computePipeline);// Access the bind group layoutconst computeBindGroupLayout = computePipeline.getBindGroupLayout(0);// Create the bind grouplet computeBindGroup = device.createBindGroup({    layout: computeBindGroupLayout,    entries: [    {        binding: 0,        resource: imageTexture.createView({            dimension: "2d",        })    },    {        binding: 1,        resource: storageTexture.createView({            dimension: "2d",        })    }] });computePass.setBindGroup(0, computeBindGroup);// Encode compute commandscomputePass.dispatchWorkgroups(40, 40);// Complete encoding compute commandscomputePass.end();// Create the render pass encoderconst renderPass = encoder.beginRenderPass({    colorAttachments: [{        view: context.getCurrentTexture().createView(),        loadOp: "clear",        clearValue: { r: 0.9, g: 0.9, b: 0.9, a: 1.0 },        storeOp: "store"    }]});// Define vertex data (vertex coordinates and UV coordinates)const vertexData = new Float32Array([   -1.0,  1.0, 0.0, 0.0,   // First vertex   -1.0, -1.0, 0.0, 1.0,   // Second vertex    1.0,  1.0, 1.0, 0.0,   // Third vertex    1.0, -1.0, 1.0, 1.0    // Fourth vertex]);// Create vertex bufferconst vertexBuffer = device.createBuffer({    label: "Example vertex buffer",    size: vertexData.byteLength,    usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST});// Write data to bufferdevice.queue.writeBuffer(vertexBuffer, 0, vertexData);renderPass.setVertexBuffer(0, vertexBuffer);// Define layout of buffer dataconst bufferLayout = {    arrayStride: 16,    attributes: [       { format: "float32x2", offset: 0, shaderLocation: 0 },       { format: "float32x2", offset: 8, shaderLocation: 1 }    ],};// Create the shader moduleconst renderModule = device.createShaderModule({    label: "Example shader module",    code: renderCode});// Define the rendering procedureconst renderPipeline = device.createRenderPipeline({    layout: "auto",    vertex: {        module: renderModule,        entryPoint: "vertexMain",        buffers: [bufferLayout]    },    fragment: {        module: renderModule,        entryPoint: "fragmentMain",        targets: [{            format: canvasFormat        }]    },    primitive: {        topology: "triangle-strip"    }});renderPass.setPipeline(renderPipeline);// Access the bind group layoutconst renderBindGroupLayout = renderPipeline.getBindGroupLayout(0);// Create the bind grouplet renderBindGroup = device.createBindGroup({    layout: renderBindGroupLayout,    entries: [{        binding: 0,        resource: sampler    },    {        binding: 1,        resource: storageTexture.createView()   }] });// Associate bind group with render pass encoderrenderPass.setBindGroup(0, renderBindGroup);// Draw vertices and complete renderingrenderPass.draw(4);renderPass.end();// Submit the render commands to the GPUdevice.queue.submit([encoder.finish()]);}// Run example functionrunExample();