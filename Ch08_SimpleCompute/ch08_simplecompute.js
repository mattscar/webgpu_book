const shaderCode = `@binding(0) @group(0) var<storage, read_write> data : array<f32, 32>;override group_size: u32;@compute @workgroup_size(group_size)fn computeMain(    @builtin(global_invocation_id) id : vec3<u32>,    @builtin(workgroup_id) wg_id : vec3<u32>,    @builtin(local_invocation_id) local_id : vec3<u32>){    data[id.x] = f32(wg_id.x) * data[id.x] + f32(local_id.x);}`;// Create top-level asynchronous functionasync function runExample() {// Check if WebGPU is supportedif (!navigator.gpu) {    throw new Error("WebGPU not supported");}// Access the GPUAdapterconst adapter = await navigator.gpu.requestAdapter();if (!adapter) {    throw new Error("No GPUAdapter found");}// Access the client's GPUconst device = await adapter.requestDevice();if (!device) {    throw new Error("Failed to create a GPUDevice");}// Create the command encoderconst encoder = device.createCommandEncoder();if (!encoder) {    throw new Error("Failed to create a GPUCommandEncoder");}// Create compute bufferconst computeBuffer = device.createBuffer({    mappedAtCreation: true,    size: 128,    usage:         GPUBufferUsage.STORAGE |         GPUBufferUsage.COPY_SRC});// Access the mapped dataconst buff = computeBuffer.getMappedRange();// Set the content of the mapped dataconst inputVals = new Array(32);inputVals.fill(1.0);new Float32Array(buff).set(inputVals);// Update label in pageconst inputMsg = "Input vector: ";document.getElementById("inputVector").innerHTML = inputMsg.concat(inputVals.toString());// Unmap buffercomputeBuffer.unmap();// Create the shader moduleconst shaderModule = device.createShaderModule({    label: "Shader module 0",    code: shaderCode});// Create the compute pass encoderconst computePass = encoder.beginComputePass({    label: "Compute Pass 0"});// Define the compute procedureconst computePipeline = device.createComputePipeline({    label: "Compute Pipeline 0",    layout: "auto",    compute: {        module: shaderModule,        entryPoint: "computeMain",        constants: {            group_size: 4        }    }   });computePass.setPipeline(computePipeline);// Access the bind group layoutconst bindGroupLayout = computePipeline.getBindGroupLayout(0);// Create the bind grouplet bindGroup = device.createBindGroup({    layout: bindGroupLayout,    entries: [{        binding: 0,        resource: { buffer: computeBuffer }    }]});computePass.setBindGroup(0, bindGroup);// Encode compute commandscomputePass.dispatchWorkgroups(8);// Complete encoding compute commandscomputePass.end();// Create mappable bufferconst mappableBuffer = device.createBuffer({  size: 128,  usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ});// Encode copy commandencoder.copyBufferToBuffer(computeBuffer, 0, mappableBuffer, 0, 128);// Submit the commands to the GPUdevice.queue.submit([encoder.finish()]);// Read data from compute bufferawait mappableBuffer.mapAsync(GPUMapMode.READ);const procData = mappableBuffer.getMappedRange();const floatData = new Float32Array(procData);// Display output in pageconst outputMsg = "Output vector: ";document.getElementById("outputVector").innerHTML = outputMsg.concat(floatData.toString());// Destroy the mappingmappableBuffer.unmap();}// Run example functionrunExample();